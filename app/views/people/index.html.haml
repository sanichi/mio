:ruby
  lo = Layout.new(
    md: [[4,2,2,2],[3,2,3]],
    xs: [[3,3,3,3],[3,3,4]],
  ).to_a
  inputs = [
    [:name,   t("name"),          :text,   lo[0], size: 14],
    [:gender, t("person.gender"), :select, lo[1], menu: person_gender_search_menu(params[:gender])],
    [:born,   t("person.born"),   :text,   lo[2], size: 10],
    [:died,   t("person.died"),   :text,   lo[3], size: 10],
    [:notes,  t("person.notes"),  :text,   lo[4], size: 10],
    [:realm,  t("person.realm"),  :select, lo[5], menu: person_realm_menu(params[:realm])],
    [:order,  t("order"),         :select, lo[6], menu: person_search_order_menu(params[:order])],
  ]

= render "utils/title", key: "person.people"

.row
  %div{class: center(lg: 10, xl: 8)}
    %section
      .header.text-center
        %h3= t("person.people")
      .body
        = render "utils/search/form", index: people_path, inputs: inputs, remote: false
        %table{class: "table table-bordered table-sm mt-3"}
          %thead
            %tr
              %th.col-9= t("name")
              %th.col-1.text-center= t("person.m_f")
              %th.col-1.text-center= t("person.born")
              %th.col-1.text-center= t("person.died")
          %tbody{id: "results"}
            = render "results", people: @people
      .footer#buttons
        - if can?(:create, Person)
          = link_to t("person.new"), new_person_path(realm: params[:realm].to_i), class: "btn btn-primary btn-sm"
        = render "utils/help_button", extra: "btn-sm"
        = link_to t("picture.pictures"), pictures_path(realm: params[:realm].to_i), class: "btn btn-success btn-sm"
        = link_to t("person.tree"), tree_people_path(realm: params[:realm].to_i), class: "btn btn-success btn-sm"

- content_for :help_title do
  = t("person.help.search")
- content_for :help do
  %ul
    %li
      = succeed(":") do
        %strong= t("name")
      Enter one or more terms to match the first, last or "known as" names of people.
      Terms are case insensitive, don't have to be full names and order is not important.
      For example, a fairly specific search might be:
      %em "john smith"
      which would only find people that had names matching both those terms.
      In contrast, a less specific search example is:
      %em "jo sm"
      which would match John Smith but also Joe Smyth, Jo Dinsmore, and so on.
    %li
      = succeed(":") do
        %strong= [t("both"), t("person.male"), t("person.female")].join("/")
      Select one depending on whether you want to search for males only, females only or both genders.
    %li
      = succeed(":") do
        %strong= t("person.born")
      Enter a year (e.g. "1927"), a range (e.g. "1925-1935") or a limit (e.g. ">1900" or "<=1960") to
      constrain the year of birth. Every person in the database has a year of birth (though some may
      be estimates).
    %li
      = succeed(":") do
        %strong= t("person.died")
      Similar to
      %em Born
      (see above) except the constraint is on the year of death instead of year of birth.
      Some people in the database will not have a year of death (because either it's unknown
      or the person is still alive) and those people will not match if you constrain it.
    %li
      = succeed(":") do
        %strong= t("notes")
      Enter one or more terms (case insensitive, not necessarily full words) to match person
      notes such as a place name (e.g. "Enniskillen", "Ballywalter") or professions (e.g.
      "farmer", "mayor").
    %li
      = succeed(":") do
        %strong= %w/last first known born/.map{ |g| t("person.order.#{g}") }.join("/")
      Choose one to order the results.
    %li
      = succeed(":") do
        %strong= %w/frst next prev last/.map{ |p| t("pagination.#{p}") }.join("/")
      Click one one of these to page forward and backwards through the results when there are more
      than the maximum per-page (10).
