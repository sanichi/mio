%nav
  .container-fluid
    %button{type: "button", "data-bs-toggle" => "collapse", "data-bs-target" => "#navbar"}
      %span
    #navbar.collapse.navbar-collapse
      %ul.me-auto

        - if can?(:read, Favourite)
          %li= link_to t("home"), favourites_path

        - if [Wk::Radical, Wk::Kanji, Wk::VerbPair, Wk::Example, Wk::Group, Note, Misa, Place, Problem, Test].map{ |c| can?(:read, c) }.any? || [:prefectures].map{ |p| can?(p, :page) }.any?
          %li.dropdown
            = link_to t("wk.japanese", locale: "jp"), "#", class: "dropdown-toggle", id: "wk_dropdown", "data-bs-toggle" => "dropdown"
            %ul.dropdown-menu
              %li= render "wk/vocabs/dropdown_menu"                         if can?(:read, Wk::Vocab)
              %li= render "wk/kanjis/dropdown_menu"                         if can?(:read, Wk::Kanji)
              %li= render "wk/radicals/dropdown_menu"                       if can?(:read, Wk::Radical)
              %li= render "wk/verb_pairs/dropdown_menu"                     if can?(:read, Wk::VerbPair)
              %li= link_to t("misa.misas"),              misas_path         if can?(:read, Misa)
              %li= link_to t("note.notes"),              notes_path         if can?(:read, Note)
              %li= link_to t("wk.example.examples"),     wk_examples_path   if can?(:read, Wk::Example)
              %li= link_to t("grammar.grammar"),         grammars_path      if can?(:read, Grammar)
              %li= link_to t("wk.group.groups"),         wk_groups_path     if can?(:read, Wk::Group)
              %li= link_to t("place.title"),            places_path        if can?(:read, Place)
              %li= link_to t("sound.sounds"),            sounds_path        if can?(:read, Sound)
              %li= link_to t("pages.prefectures.title"),  prefectures_path   if can?(:prefectures, :page)
              %li= link_to t("test.tests"),              tests_path         if can?(:read, Test)
              %li= link_to t("wk.verb_pair.verb_pairs"), wk_verb_pairs_path if can?(:read, Wk::VerbPair)
              %li= link_to t("problem.problems"),        problems_path      if can?(:read, Problem)

        - if [Person, Picture, Partnership].map{|c| can?(:read, c) }.any?
          %li.dropdown
            = link_to t("family"), "#", class: "dropdown-toggle", "data-bs-toggle" => "dropdown"
            %ul.dropdown-menu
              %li= link_to t("person.tree"),              tree_people_path   if can?(:tree, Person)
              %li= link_to t("person.people"),            people_path        if can?(:read, Person)
              %li= link_to t("picture.pictures"),         pictures_path      if can?(:read, Picture)
              %li= link_to t("partnership.partnerships"), partnerships_path  if can?(:read, Partnership)
              %li= link_to t("person.checks.title"),      checks_people_path if can?(:checks, Person)

        - if [Flat].map{ |c| can?(:read, c) }.any? || [:pam, :risle, :deeds].map{ |a| can?(a, :page) }.any?
          %li.dropdown
            = link_to t("pages.risle.name"), "#", class: "dropdown-toggle", "data-bs-toggle" => "dropdown"
            %ul.dropdown-menu
              %li= link_to t("map"),        risle_path if can?(:risle, :page)
              %li= link_to t("pages.pam"),  pam_path   if can?(:pam, :page)
              %li= link_to t("flat.flats"), flats_path if can?(:read, Flat)
              %li= link_to t("flat.deeds"), deeds_path if can?(:deeds, :page)

        -  if [:aoc, :board, :env, :play, :premier, :weight].map{ |p| can?(p, :page) }.any? || [Lesson, Login, Match, Team, Tutorial, User].map{ |c| can?(:read, c) }.any?
          %li.dropdown
            = link_to t("other"), "#", class: "dropdown-toggle", "data-bs-toggle" => "dropdown"
            %ul.dropdown-menu
              %li= link_to t("mass.mass"),           weight_path    if can?(:weight, :page)
              %li= link_to t("lesson.lessons"),      lessons_path   if can?(:read, Lesson)
              %li= link_to t("tutorial.tutorials"),  tutorials_path if can?(:read, Tutorial)
              %li= link_to t("pages.board"),         board_path     if can?(:board, :page)
              %li= link_to t("pages.aoc.short"),     aoc_path       if can?(:aoc, :page)
              %li= link_to t("pages.play"),          play_path      if can?(:play, :page)
              %li= link_to t("team.teams"),          teams_path     if can?(:read, Team)
              %li= link_to t("match.matches"),       matches_path   if can?(:read, Match)
              %li= link_to t("pages.premier.short"), premier_path   if can?(:premier, :page)
              %li= link_to t("user.users"),          users_path     if can?(:read, User)
              %li= link_to t("login.logins"),        logins_path    if can?(:read, Login)
              %li= link_to t("pages.env"),           env_path       if can?(:env, :page)

      %ul.ms-auto
        %li
          - if authenticated?
            = link_to t("session.sign_out", user: current_user.initials), sign_out_path
          - else
            = link_to t("session.sign_in"), sign_in_path
