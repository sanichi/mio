%nav
  %button{type: "button", "data-toggle" => "collapse", "data-target" => "#navbar"}
    %span
  #navbar.collapse.navbar-collapse
    %ul.left

      - if can?(:read, Favourite)
        %li= link_to t("home"), favourites_path

      - if [Wk::Radical, Wk::Kanji, Wk::VerbPair, Wk::Example, Wk::Group, Note, Misa, Problem].map{ |c| can?(:read, c) }.any?
        %li.dropdown
          = link_to t("wk.japanese", locale: "jp"), "#", class: "dropdown-toggle", id: "wk_dropdown", "data-toggle" => "dropdown"
          .dropdown-menu
            = render "wk/vocabs/dropdown_menu"                         if can?(:read, Wk::Vocab)
            = render "wk/kanjis/dropdown_menu"                         if can?(:read, Wk::Kanji)
            = render "wk/radicals/dropdown_menu"                       if can?(:read, Wk::Radical)
            = render "wk/verb_pairs/dropdown_menu"                     if can?(:read, Wk::VerbPair)
            = link_to t("wk.verb_pair.verb_pairs"), wk_verb_pairs_path if can?(:read, Wk::VerbPair)
            = link_to t("wk.example.examples"),     wk_examples_path   if can?(:read, Wk::Example)
            = link_to t("wk.group.groups"),         wk_groups_path     if can?(:read, Wk::Group)
            = link_to t("misa.misas"),              misas_path         if can?(:read, Misa)
            = link_to t("note.notes"),              notes_path         if can?(:read, Note)
            = link_to t("problem.problems"),        problems_path      if can?(:read, Problem)

      - if [Person, Picture, Partnership].map{|c| can?(:read, c) }.any?
        %li.dropdown
          = link_to t("family"), "#", class: "dropdown-toggle", "data-toggle" => "dropdown"
          .dropdown-menu
            = link_to t("person.tree"),              tree_people_path       if can?(:tree, Person)
            = link_to t("person.people"),            people_path            if can?(:read, Person)
            = link_to t("picture.pictures"),         pictures_path          if can?(:read, Picture)
            = link_to t("partnership.partnerships"), partnerships_path      if can?(:read, Partnership)
            = link_to t("person.checks.title"),      checks_people_path     if can?(:checks, Person)

      - if [Position, Opening, Lesson].map{|c| can?(:read, c) }.any?
        %li.dropdown
          = link_to t("chess"), "#", class: "dropdown-toggle", "data-toggle" => "dropdown"
          .dropdown-menu
            = link_to t("lesson.lessons"),     lessons_path   if can?(:read, Lesson)
            = link_to t("position.positions"), positions_path if can?(:read, Position)
            = link_to t("opening.openings"),   openings_path  if can?(:read, Opening)

      - if [Flat].map{ |c| can?(:read, c) }.any? || [:pam, :risle, :deeds].map{ |a| can?(a, Page) }.any?
        %li.dropdown
          = link_to t("pages.risle.name"), "#", class: "dropdown-toggle", "data-toggle" => "dropdown"
          .dropdown-menu
            = link_to t("map"),        risle_path  if can?(:risle, Page)
            = link_to t("pages.pam"),  pam_path    if can?(:pam, Page)
            = link_to t("flat.flats"), flats_path  if can?(:read, Flat)
            = link_to t("flat.deeds"), deeds_path  if can?(:deeds, Page)

      - if [Income, Expense].map{|c| can?(:read, c) }.any?
        %li.dropdown
          = link_to t("money"), "#", class: "dropdown-toggle", "data-toggle" => "dropdown"
          .dropdown-menu
            = link_to t("income.incomes"),   graph_incomes_path if can?(:read, Income)
            = link_to t("expense.expenses"), expenses_path      if can?(:read, Expense)

      - if [:aoc, :magic, :play].map{ |p| can?(p, Page) }.any? || [Bucket, Login, Mass, Opening, Position, User].map{ |c| can?(:read, c) }.any?
        %li.dropdown
          = link_to t("other"), "#", class: "dropdown-toggle", "data-toggle" => "dropdown"
          .dropdown-menu
            = link_to t("mass.mass"),       graph_masses_path if can?(:read, Mass)
            = link_to t("bucket.buckets"),  buckets_path      if can?(:read, Bucket)
            = link_to t("pages.aoc.short"), aoc_path          if can?(:aoc, Page)
            = link_to t("pages.magic"),     magic_path        if can?(:magic, Page)
            = link_to t("pages.play"),      play_path         if can?(:play, Page)
            = link_to t("user.users"),      users_path        if can?(:read, User)
            = link_to t("login.logins"),    logins_path       if can?(:read, Login)

    %ul.right
      %li
        - if authenticated?
          = link_to t("session.sign_out"), sign_out_path
        - else
          = link_to t("session.sign_in"), sign_in_path
