:ruby
  lo = Layout.new(
    xs: [3,3,3,3],
  ).to_a
  inputs = [
    [:male,    t("person.male"),         :text,   lo[0], size: 12],
    [:female,  t("person.female"),       :text,   lo[1], size: 12],
    [:wedding, t("partnership.wedding"), :text,   lo[2], size: 12],
    [:realm,   t("person.realm"),        :select, lo[3], menu: person_realm_menu(params[:realm])],
  ]

= render "utils/title", key: "partnership.partnerships"

.row
  %div{class: center(xl: 6, lg: 8, md: 10)}
    %section
      .header.text-center
        %h3= t("partnership.partnerships")
      .body
        = render "utils/search/form", index: partnerships_path, inputs: inputs, remote: false
        %table{class: "table table-bordered table-sm mt-3"}
          %thead
            %tr
              %th= t("partnership.husband")
              %th= t("partnership.wife")
              %th= t("partnership.wedding")
          %tbody{id: "results"}
            = render "results", partnerships: @partnerships
      .footer
        - if can?(:create, Partnership)
          = link_to t("partnership.new"), new_partnership_path(realm: params[:realm].to_i), class: "btn btn-primary btn-sm"
        = render "utils/help_button", extra: "btn-sm"
        = link_to t("person.people"), people_path, class: "btn btn-success btn-sm"
        = link_to t("picture.pictures"), pictures_path, class: "btn btn-success btn-sm"
        = link_to t("person.tree"), tree_people_path, class: "btn btn-success btn-sm"

- content_for :help_title do
  = "How to Search for Partnerships"
- content_for :help do
  %ul
    %li
      = succeed(":") do
        %strong= t("person.male")
      Enter one or more terms to match the first, last or "known as" names of the male partner.
      Terms are case insensitive, don't have to be full names and order is not important.
      For example, a fairly specific search might be:
      %em "john smith"
      which would only find males that had names matching both those terms.
      In contrast, a less specific search example is:
      %em "jo sm"
      which would match John Smith but also Joe Smyth, Jon Dinsmore, and so on.
    %li
      = succeed(":") do
        %strong= t("person.female")
      Similar to
      %em= t("person.male")
      above but will constrain the female half of the partnership
      and also search the pre-marriage surname.
      For example, "coyle orr" will match women who were originally
      called "Coyle" then later called "Orr" (or the other way around).
    %li
      = succeed(":") do
        %strong= t("partnership.wedding")
      Enter a year (e.g. "1927"), a range (e.g. "1925-1935") or a limit (e.g. ">1900" or "<=1960") to
      constrain the start year of the partnership. For marriarges (the majority of the partnerships
      in this database) this is the wedding year.
