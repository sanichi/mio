#!/usr/bin/env bash
set -euo pipefail

#
# Sync pictures in public/images and public/people with the live server.
# These images used to be in git, but they hardly ever change, so for the
# sake of adding new ones, this setup should be a lot easier.
#

# Local stuff.
home="/Users/mjo/Projects/app/mio"       # local project
source="$home/public"                    # local directory
isource="$source/images"                 # local images directory
psource="$source/people"                 # local people directory
tmp1=$(mktemp)                           # temporary file
tmp2=$(mktemp)                           # temporary file

# Remote stuff.
server="mor"                             # remote machine (sanichi@morioka.sanichi.me)
target="/var/www/me.mio/shared/public"   # remote directory
itarget="$target/images"                 # remote images directory
ptarget="$target/people"                 # remote people directory

# Other stuff.
awkp='{ if (NF == 9) printf "%-30s %s\n", $9, $5 }' # awk program to filter ls output

# Prepare for options and arguments.                                                      #
isync=false
psync=false

# Parse options.
while getopts ":hip" opt; do
  case $opt in
    i) isync=true;;
    p) psync=true;;
    h)
      echo "Check and optionally perform sync for public/images and public/people"
      echo "Usage: $0 [-ip]"
      echo "Options:"
      echo "  -i        synchronize public/images"
      echo "  -p        synchronize public/people"
      echo "Examples:"
      echo "  $0        # check both are OK"
      echo "  $0 -i     # sync only images then check both are OK"
      echo "  $0 -ip    # sync both then check both are OK"
      exit 0
      ;;
    \?)
      echo "invalid option $OPTARG"
      exit 1
      ;;
  esac
done
shift $(($OPTIND - 1))

# Deal with remaining arguments.
if [[ $# > 0 ]]; then
  echo "too many arguments ($#)"
  exit 1
fi

# Sanity checks.                                                                      #
if ! [[ $PWD = $home ]]; then
  echo "please run me from $home"
  exit 1;
fi
if ! [[ -d $isource ]]; then
  echo "$isource doesn't exist"
  exit 1;
fi
if ! [[ -d $psource ]]; then
  echo "$psource doesn't exist"
  exit 1;
fi

# Optionally sync images.
if [[ $isync = true ]]; then
  rsync -rt "$isource"/ "$server:$itarget"
fi

# Optionally sync people.
if [[ $psync = true ]]; then
  rsync -rt "$psource"/ "$server:$ptarget"
fi

# Compare listings of local and remote images directory.
ls -l $isource | gawk "$awkp" | sort > $tmp1
ssh $server "ls -l $itarget" | gawk "$awkp" | sort > $tmp2
echo "checking images ..."
diff $tmp1 $tmp2 || true # don't let our use of "set -e" exit here

# Compare listings of local and remote people directory.
ls -l $psource | gawk "$awkp" | sort > $tmp1
ssh $server "ls -l $ptarget" | gawk "$awkp" | sort > $tmp2
echo "checking people ..."
diff $tmp1 $tmp2 || true
