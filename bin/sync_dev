#!/usr/bin/perl
use strict;

# Setup.
my $tsu_app = '/var/www/mio/current';
my $tsu_img = "$tsu_app/public/system/pictures";
my $tsu_aud = "$tsu_app/public/system/audio";
my $tmp_sql = '/tmp/mio.sql';
my $tmp_img = '/tmp/img.tar.gz';
my $tmp_aud = '/tmp/aud.tar.gz';
my $loc_app = '/Users/mjo/Projects/sni_mio_app';
my $loc_img = "$loc_app/public/system/pictures";
my $loc_aud = "$loc_app/public/system/audio";
my $loc_db  = 'sni_mio_app_development';
my $ssh_usr = 'sanichi@tsukuba.markorr.net';

# Sanity check.
&check(-d $loc_app, "directory $loc_app does not exist");
&check(-d $loc_img, "directory $loc_img does not exist");
&check(-d $loc_aud, "directory $loc_aud does not exist");

# Generate data on server.
&run("ssh $ssh_usr 'pg_dump sni_mio_app_production --no-owner --no-privileges --clean --file $tmp_sql'", "couldn't export DB on server");
&run("ssh $ssh_usr 'cd $tsu_img; tar -zcf $tmp_img .'", "couldn't archive images on server");
&run("ssh $ssh_usr 'cd $tsu_aud; tar -zcf $tmp_aud .'", "couldn't archive audio on server");

# Remove old local data.
&run("rm -f $tmp_sql", "couldn't remove $tmp_sql") if -f $tmp_sql;
&run("rm -f $tmp_img", "couldn't remove $tmp_img") if -f $tmp_img;
&run("rm -f $tmp_aud", "couldn't remove $tmp_aud") if -f $tmp_aud;

# Copy new data from server.
&run("scp $ssh_usr:$tmp_sql $tmp_sql", "couldn't copy SQL export from server");
&run("scp $ssh_usr:$tmp_img $tmp_img", "couldn't copy image archive from server");
&run("scp $ssh_usr:$tmp_aud $tmp_aud", "couldn't copy audio archive from server");

# Does this all look good so far?
my $ans = &ask('Proceed with sync [yN]', qr/^(Y(es)?|No?|)$/i);
exit unless $ans =~ /^Y(es)?/i;

# Install data locally.
&run("psql -q $loc_db < $tmp_sql", "couldn't import SQL to development DB");
&run("rm -rf $loc_img/*", "couldn't delete old images");
&run("tar -zxf $tmp_img -C $loc_img", "couldn't extract images to $loc_img");
&run("tar -zxf $tmp_aud -C $loc_aud", "couldn't extract audio to $loc_aud");

#
# Utilities.
#

sub check { die "$_[1]\n", unless $_[0] }

sub run { printf "$_[0]\n"; &check(!system($_[0]), $_[1]) }

sub ask
{
  my ($question, $allowed) = @_;

  my $answer;
  while (!defined($answer) || $answer !~ $allowed)
  {
    printf '%s?: ', $question;
    $answer = <STDIN>;
    $answer =~ s/^\s+//;
    $answer =~ s/\s+$//;
  }

  $answer;
}
